{
  "adapter_name": "common",
  "analysis_context": "Automated detection via Nautilus Trader Rig",
  "bug_id": "AUTO_BUG_common_17_183509",
  "code_sample": "",
  "description": "The function `get_date_time_range` contains a critical integer conversion vulnerability. The code converts `u64` values to `i128` using `i128::from()`, which preserves the bit pattern but does not handle the case where the UnixNanos timestamp exceeds the maximum value representable by a signed 64-bit integer (i64::MAX). This can cause incorrect timestamp interpretation when timestamps are beyond the year 2262 (when Unix nanoseconds will exceed i64::MAX). In financial trading systems, incorrect timestamp handling can lead to data corruption, incorrect order sequencing, and potential financial losses.",
  "file_location": {
    "details": {
      "absolute_path": "/Users/vadimnicolai/Public/trading/nautilus_trader/nautilus-trader-rig/../crates/adapters/databento/src/common.rs",
      "directory": "/Users/vadimnicolai/Public/trading/nautilus_trader/nautilus-trader-rig/../crates/adapters/databento/src",
      "file_size_bytes": 2369,
      "filename": "common.rs",
      "last_modified_timestamp": 1750320294,
      "relative_path": "../crates/adapters/databento/src/common.rs"
    },
    "source_location": {}
  },
  "fix_suggestion": "Use a checked conversion that validates the timestamp is within the valid range for OffsetDateTime. Implement proper bounds checking and consider using a dedicated timestamp validation function:",
  "severity": "CRITICAL",
  "timestamp": "20250825_183509",
  "workspace_info": {
    "branch": "main",
    "commit_hash": "647630eb9ce73d7235c504cfe96cd6553b6ab21b",
    "repository": "nautilus_trader"
  }
}