use nautilus_trader_rig::{scan, all_patterns};
use rstest::rstest;

/// A helper case tying a pattern id to a positive sample.
#[derive(Debug)]
struct Case { id: &'static str, sample: &'static str }

fn has_id(issues: &[nautilus_trader_rig::Issue], id: &str) -> bool {
    issues.iter().any(|i| i.pattern_id == id)
}

// A "safe" snippet intended to *not* match any risky pattern.
const SAFE_SNIPPET: &str = r#"
fn main() {
    let x: i32 = 42;
    let y = x + 1;
    let s = String::from("ok");
    let _ = (x, y, s.len());
    // No panics, no unwrap, no unsafe, no secrets, no http://
}
"#;

// --- Positive cases: one per pattern ---
// Minimal trigger snippets per id (no compilation required).

fn positive_cases() -> Vec<Case> {
    use Case as C;
    vec![
        C{ id:"R001", sample:r#"fn main(){ panic!("boom"); }"# },
        C{ id:"R002", sample:r#"fn f(){ todo!("later"); }"# },
        C{ id:"R003", sample:r#"fn f(){ unimplemented!() }"# },
        C{ id:"R004", sample:r#"fn f(){ assert!(1==2); }"# },
        C{ id:"R005", sample:r#"fn f(){ assert_eq!(1,2); }"# },
        C{ id:"R006", sample:r#"fn f(){ assert_ne!(1,1); }"# },
        C{ id:"R007", sample:r#"fn f()->!{ unreachable!() }"# },
        C{ id:"R008", sample:r#"fn f(o:Option<i32>){ let _ = o.unwrap(); }"# },
        C{ id:"R009", sample:r#"fn f(o:Option<i32>){ let _ = o.expect("oops"); }"# },
        C{ id:"R010", sample:r#"unsafe fn f(o:Option<i32>){ let _ = o.unwrap_unchecked(); }"# },

        C{ id:"R011", sample:r#"unsafe fn f(v:&[i32]){ let _ = v.get_unchecked(0); }"# },
        C{ id:"R012", sample:r#"unsafe fn f(v:&mut [i32]){ let _ = v.get_unchecked_mut(0); }"# },
        C{ id:"R013", sample:r#"fn f(){ let _:u32 = unsafe{ std::mem::transmute(1u8) }; }"# },
        C{ id:"R014", sample:r#"unsafe fn f<T:Default>(){ let _:T = std::mem::zeroed(); }"# },
        C{ id:"R015", sample:r#"unsafe fn f<T>(){ let _:T = std::mem::uninitialized(); }"# },
        C{ id:"R016", sample:r#"unsafe fn f(b:&[u8]){ let _ = std::str::from_utf8_unchecked(b); }"# },
        C{ id:"R017", sample:r#"unsafe fn f(p:*const u8){ let _=&std::slice::from_raw_parts(p,1); }"# },
        C{ id:"R018", sample:r#"unsafe fn f(p:*mut u8){ let _=&mut std::slice::from_raw_parts_mut(p,1); }"# },
        C{ id:"R019", sample:r#"fn f(){ let _ = std::ptr::null::<u8>(); }"# },
        C{ id:"R020", sample:r#"fn f(){ let _ = std::ptr::null_mut::<u8>(); }"# },
        C{ id:"R021", sample:r#"unsafe fn f(p:*const u8){ let _ = std::ptr::read(p); }"# },
        C{ id:"R022", sample:r#"unsafe fn f(p:*mut u8, v:u8){ std::ptr::write(p,v); }"# },
        C{ id:"R023", sample:r#"unsafe fn f(a:*mut u8,b:*const u8){ std::ptr::copy(b,a,1); }"# },
        C{ id:"R024", sample:r#"unsafe fn f(a:*mut u8,b:*const u8){ std::ptr::copy_nonoverlapping(b,a,1); }"# },
        C{ id:"R025", sample:r#"static mut G:i32=0; fn f(){ unsafe{G=1} }"# },
        C{ id:"R026", sample:r#"fn f(){ let v=String::from("x"); std::mem::forget(v); }"# },
        C{ id:"R027", sample:r#"fn f(){ let s=Box::new(String::from("x")); let _=Box::leak(s); }"# },
        C{ id:"R028", sample:r#"use std::cell::UnsafeCell; use std::sync::Arc; fn f(){ let _:Arc<UnsafeCell<i32>>=Arc::new(UnsafeCell::new(0)); }"# },
        C{ id:"R029", sample:r#"use std::{rc::Rc,cell::RefCell,thread}; fn g(){ let x=Rc::new(RefCell::new(0)); thread::spawn(||{}); let _=x; }"# },
        C{ id:"R030", sample:r#"use std::sync::Mutex; fn f(){ let m=Mutex::new(1); let _=m.lock().unwrap(); }"# },
        C{ id:"R031", sample:r#"use std::sync::RwLock; fn f(){ let m=RwLock::new(1); let _=m.read().unwrap(); }"# },
        C{ id:"R032", sample:r#"use std::sync::RwLock; fn f(){ let m=RwLock::new(1); let _=m.write().unwrap(); }"# },
        C{ id:"R033", sample:r#"async fn f(){ std::thread::sleep(std::time::Duration::from_millis(1)); }"# },
        C{ id:"R034", sample:r#"async fn f(){ let _=std::fs::read("x"); }"# },
        C{ id:"R035", sample:r#"fn f(){ dbg!(123); }"# },
        C{ id:"R036", sample:r#"fn f(){ eprintln!("debug"); }"# },
        C{ id:"R037", sample:r#"fn f(o:Option<i32>){ let _=o.expect("TODO fix"); }"# },
        C{ id:"R038", sample:r#"fn f(){ let _=std::env::var("HOME").unwrap(); }"# },
        C{ id:"R039", sample:r#"fn f(s:&str){ let _:u32 = s.parse().unwrap(); }"# },
        C{ id:"R040", sample:r#"fn f(s:&str){ let _:u32 = s.parse::<u32>().expect("bad"); }"# },
        C{ id:"R041", sample:r#"fn f(x:u64){ let _=x as u8; }"# },
        C{ id:"R042", sample:r#"unsafe fn f(p:*const i32){ let _=p.offset(1); }"# },
        C{ id:"R043", sample:r#"fn f(v:&mut Vec<u8>){ let _=v.as_mut_ptr(); }"# },
        C{ id:"R044", sample:r#"unsafe fn f<T:Copy>(t:T){ let _=std::mem::transmute_copy(&t); }"# },
        C{ id:"R045", sample:r#"use std::thread; fn f(){ let h=thread::spawn(||1); let _=h.join().unwrap(); }"# },
        C{ id:"R046", sample:r#"async fn f(){ tokio::spawn(async {}); }"# },
        C{ id:"R047", sample:r#"fn f(){ let _=1.0f64==f64::NAN; }"# },
        C{ id:"R048", sample:r#"fn f(){ let _=1.23==4.56; }"# },
        C{ id:"R049", sample:r#"const API_KEY:&str="apikey=SECRET123";"# },
        C{ id:"R050", sample:r#"const K:&str="AKIAABCDEFGHIJKLMN";"# },
        C{ id:"R051", sample:r#"const X:&str="aws_secret_access_key=abc";"# },
        C{ id:"R052", sample:r#"const P:&str="-----BEGIN PRIVATE KEY-----";"# },
        C{ id:"R053", sample:r#"const T:&str="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.a.b";"# },
        C{ id:"R054", sample:r#"fn f(b:reqwest::ClientBuilder){ let _=b.danger_accept_invalid_certs(true); }"# },
        C{ id:"R055", sample:r#"use openssl::ssl::SslVerifyMode; fn f(){ let _=SslVerifyMode::NONE; }"# },
        C{ id:"R056", sample:r#"fn f(x:rustls::ClientConfig){ let _=x.dangerous(); }"# },
        C{ id:"R057", sample:r#"use std::process::Command; fn f(){ let _=Command::new("sh").arg("-c"); }"# },
        C{ id:"R058", sample:r#"use std::process::Command; fn f(){ let _=Command::new("cmd").args(&["/C","dir"]); }"# },
        C{ id:"R059", sample:r#"use std::fs::File; fn f(){ let _=File::create("/tmp/tmp.txt"); }"# },
        C{ id:"R060", sample:r#"use std::fs::OpenOptions; fn f(){ let _=OpenOptions::new().mode(0o777); }"# },
        C{ id:"R061", sample:r#"use std::fs; fn f(){ let _=fs::remove_dir_all("x"); }"# },
        C{ id:"R062", sample:r#"use regex::Regex; fn f(){ let _=Regex::new("x").unwrap(); }"# },
        C{ id:"R063", sample:r#"use std::time::UNIX_EPOCH; fn f(){ let _=std::time::SystemTime::now().duration_since(UNIX_EPOCH).unwrap(); }"# },
        C{ id:"R064", sample:r#"fn f(){ let _=try!(Ok::<_,()>(1)); }"# },
        C{ id:"R065", sample:r#"use std::error::Error; fn f(e:&dyn Error){ let _=e.description(); }"# },
        C{ id:"R066", sample:r#"fn f(){ println!("left"); }"# },
        C{ id:"R067", sample:r#"// TODO: fix later"# },
        C{ id:"R068", sample:r#"// FIXME: urgent"# },
        C{ id:"R069", sample:r#"#![allow(dead_code)] fn f(){}"# },
        C{ id:"R070", sample:r#"#![allow(unused_variables, unused_imports)]"# },
        C{ id:"R071", sample:r#"#[allow(clippy::unwrap_used)] fn f(){ }"# },
        C{ id:"R072", sample:r#"async fn f(){ let _=reqwest::blocking::get("http://x"); }"# },
        C{ id:"R073", sample:r#"async fn f(){ async_std::task::block_on(async{}); }"# },
        C{ id:"R074", sample:r#"fn f(){ tokio::task::block_in_place(||{}); }"# },
        C{ id:"R075", sample:r#"fn f(v:Vec<i32>){ let _:Vec<_>=v.into_iter().filter_map(|x|Some(x)).collect(); }"# },
        C{ id:"R076", sample:r#"fn f(v:Vec<i32>){ let _:Vec<_>=v.into_iter().map(|x|Some(x)).flatten().collect(); }"# },
        C{ id:"R077", sample:r#"fn f(){ let _:chrono::NaiveDateTime; }"# },
        C{ id:"R078", sample:r#"fn f(){ let _=std::time::SystemTime::now(); }"# },
        C{ id:"R079", sample:r#"const URL:&str="http://insecure";"# },
        C{ id:"R080", sample:r#"fn f(){ std::process::exit(1); }"# },
        C{ id:"R081", sample:r#"use std::panic::catch_unwind; fn f(){ let _=catch_unwind(|| unsafe{}); }"# },
        C{ id:"R082", sample:r#"fn f(){ let _=futures::channel::mpsc::unbounded::<i32>(); }"# },
        C{ id:"R083", sample:r#"fn f(){ let _=tokio::sync::mpsc::unbounded_channel::<i32>(); }"# },
        C{ id:"R084", sample:r#"fn f(){ let _=std::sync::mpsc::channel::<i32>(); }"# },
        C{ id:"R085", sample:r#"fn f()->Result<(),()> { let _ = Err(())?; Ok(()) }"# },
        C{ id:"R086", sample:r#"fn f(o:Option<i32>){ let _=o.unwrap_or_default(); }"# },
        C{ id:"R087", sample:r#"fn f(o:Option<i32>){ let _=o.unwrap_or(Default::default()); }"# },
        C{ id:"R088", sample:r#"fn f(r:Result<i32,()>){ match r { Err(_)=>{}, _=>{} } }"# },
        C{ id:"R089", sample:r#"fn f(r:Result<i32,()>){ if let Err(_)=r { } }"# },
        C{ id:"R090", sample:r#"use std::any::Any; fn f(b:Box<dyn Any>){ let _: &i32 = b.downcast_ref::<i32>().unwrap(); }"# },
        C{ id:"R091", sample:r#"fn f(v:&mut Vec<i32>){ unsafe{ v.set_len(10); } }"# },
        C{ id:"R092", sample:r#"use std::mem::MaybeUninit; fn f(){ let x:MaybeUninit<i32>=MaybeUninit::uninit(); unsafe{ let _=x.assume_init(); } }"# },
        C{ id:"R093", sample:r#"unsafe impl Send for (){}"# },
        C{ id:"R094", sample:r#"unsafe impl Sync for (){}"# },
        C{ id:"R095", sample:r#"fn f(x:u8){ let _=x.wrapping_add(1); }"# },
        C{ id:"R096", sample:r#"fn f(x:u8){ let _=x.wrapping_sub(1); }"# },
        C{ id:"R097", sample:r#"fn f(rx:std::sync::mpsc::Receiver<i32>){ let _=rx.recv().unwrap(); }"# },
        C{ id:"R098", sample:r#"fn f(name:&str){ let _=format!("SELECT * FROM t WHERE name = {}", name); }"# },
        C{ id:"R099", sample:r#"fn f(){ let _:u32 = rand::random::<u32>(); }"# },
        C{ id:"R100", sample:r#"fn f(){ let _=std::env::var("DB_PASSWORD"); }"# },
        C{ id:"R101", sample:r#"use std::collections::*;"# },
        C{ id:"R102", sample:r#"#[allow(non_snake_case)] struct X{Value:i32}"# },
        C{ id:"R103", sample:r#"#[allow(unused_mut)] fn f(){ let mut x=0; let _=x; }"# },
        C{ id:"R104", sample:r#"use std::process::Command; fn f(arg:&str){ let _=Command::new("sh").arg("-c").arg(format!("echo {}", arg)); }"# },
        C{ id:"R105", sample:r#"fn f(){ let _="tls insecure"; } // ureq tls insecure (heuristic)"# },
        C{ id:"R106", sample:r#"fn f(o:Option<i32>){ let _=o.expect("never fails"); }"# },
        C{ id:"R107", sample:r#"use std::time::Duration; fn f(){ std::thread::sleep(Duration::from_millis(10)); }"# },
        C{ id:"R108", sample:r#"const URL:&str="http://user:pass@host/path";"# },
        C{ id:"R109", sample:r#"use std::sync::Arc; fn f(){ std::mem::forget(Arc::new(1)); }"# },
        C{ id:"R110", sample:r#"use std::cell::UnsafeCell; fn f(){ let _=UnsafeCell::<i32>::new(0); }"# },
        C{ id:"R111", sample:r#"async fn f(){ let _=std::fs::read_to_string("x"); }"# },
        C{ id:"R112", sample:r#"use std::process::Command; fn f(){ let _=Command::new("true").spawn(); }"# },
        C{ id:"R113", sample:r#"fn f(){ let _=std::time::Instant::now(); }"# },
        C{ id:"R114", sample:r#"use std::fs::OpenOptions; fn f(){ let _=OpenOptions::new().write(true).create(true).truncate(true); }"# },
        C{ id:"R115", sample:r#"fn f(name:&str){ let q = "select * from t where n = " .to_string() + name; let _=q; }"# },
        C{ id:"R116", sample:r#"fn f(x:f64){ let _=x as u8; }"# },
        C{ id:"R117", sample:r#"impl Drop for (){ fn drop(&mut self){ let _=Err::<(),()>(()).unwrap(); } }"# },
        C{ id:"R118", sample:r#"use std::any::Any; fn f(b:Box<dyn Any>){ let _:Box<i32>=b.downcast::<i32>().unwrap(); }"# },
        C{ id:"R119", sample:r#"const K:&str="-----BEGIN RSA PRIVATE KEY-----";"# },
        C{ id:"R120", sample:r#"fn f(){ unsafe { /* ... */ } }"# },

        // ---- Performance additions R121–R220 ----
        C{ id:"R121", sample:r#"fn f(v:Vec<i32>){ let _ = v.clone(); }"# },
        C{ id:"R122", sample:r#"fn f(){ let _="x".to_string(); }"# },
        C{ id:"R123", sample:r#"fn f(){ let _=format!("hello"); }"# },
        C{ id:"R124", sample:r#"fn f(){ let _=format!("{}", 5); }"# },
        C{ id:"R125", sample:r#"fn f(){ println!(format!("x")); }"# },
        C{ id:"R126", sample:r#"fn f(){ let _=Vec::new(); }"# },
        C{ id:"R127", sample:r#"fn f(){ let _=String::new(); }"# },
        C{ id:"R128", sample:r#"fn f(){ let _=HashMap::new(); }"# },
        C{ id:"R129", sample:r#"fn f(){ let _=BTreeMap::new(); }"# },
        C{ id:"R130", sample:r#"fn f<I:Iterator>(it:I){ let _:Vec<_>=it.collect::<Vec<_>>(); }"# },
        C{ id:"R131", sample:r#"fn f(s:&str){ let _:String=s.chars().collect::<String>(); }"# },
        C{ id:"R132", sample:r#"fn f(s:&str){ let _:Vec<char>=s.chars().collect::<Vec<char>>(); }"# },
        C{ id:"R133", sample:r#"fn f<I:Iterator<Item=&i32>>(it:I){ let _=it.cloned(); }"# },
        C{ id:"R134", sample:r#"fn f(s:&str){ let _=s.to_owned(); }"# },
        C{ id:"R135", sample:r#"fn f(v:&mut Vec<i32>){ v.extend(vec![1,2,3]); }"# },
        C{ id:"R136", sample:r#"fn f(s:&mut String){ s.push_str("x"); }"# },
        C{ id:"R137", sample:r#"fn f(s:&str){ let _=s.split(" "); }"# },
        C{ id:"R138", sample:r#"fn f(s:&str){ let _=s.trim().to_string(); }"# },
        C{ id:"R139", sample:r#"fn f(s:String){ let _=s.replace("a","b"); }"# },
        C{ id:"R140", sample:r#"fn f(b:&[u8]){ let _=String::from_utf8_lossy(b); }"# },
        C{ id:"R141", sample:r#"fn f(v:Vec<String>){ let _=v.into_iter().map(|x| x.clone()); }"# },
        C{ id:"R142", sample:r#"fn f(v:Vec<i32>){ let _=v.into_iter().map(|x| x.to_string()); }"# },
        C{ id:"R143", sample:r#"fn f(o:Option<i32>){ let _=o.and_then(|x| Some(x)); }"# },
        C{ id:"R144", sample:r#"fn f(v:Vec<i32>){ let _=v.into_iter().filter(|_| true); }"# },
        C{ id:"R145", sample:r#"fn f(v:Vec<i32>){ let _=v.into_iter().filter(|_| false); }"# },
        C{ id:"R146", sample:r#"fn f<I:Iterator>(it:I){ let _=it.take(usize::MAX); }"# },
        C{ id:"R147", sample:r#"fn f<I:Iterator>(it:I){ let _=it.skip(0); }"# },
        C{ id:"R148", sample:r#"fn f<I:Iterator>(mut it:I){ let _=it.nth(0); }"# },
        C{ id:"R149", sample:r#"fn f<I:DoubleEndedIterator>(it:I){ let _=it.rev().rev(); }"# },
        C{ id:"R150", sample:r#"fn f(v:&mut Vec<i32>){ let _:Vec<_>=v.drain(..).collect::<Vec<_>>(); }"# },
        C{ id:"R151", sample:r#"fn f(v:&Vec<i32>){ let _=v.iter().count(); }"# },
        C{ id:"R152", sample:r#"fn f(name:String){ let _=String::from(name.to_string()); }"# },
        C{ id:"R153", sample:r#"fn f(o:Option<String>){ let _=o.unwrap_or_else(|| String::new()); }"# },
        C{ id:"R154", sample:r#"fn f(o:Option<String>){ let _=o.unwrap_or("".to_string()); }"# },
        C{ id:"R155", sample:r#"fn f(s:&str){ let _=s.chars().nth(3); }"# },
        C{ id:"R156", sample:r#"fn f(s:&str){ let _=s.chars().count(); }"# },
        C{ id:"R157", sample:r#"fn f(s:String){ let _=s.contains(&String::from("a")); }"# },
        C{ id:"R158", sample:r#"fn f(s:String){ let _=format!("{}", s.to_string()); }"# },
        C{ id:"R159", sample:r#"fn f(){ let _=Vec::<i32>::with_capacity(0); }"# },
        C{ id:"R160", sample:r#"fn f(){ let _=String::with_capacity(0); }"# },
        C{ id:"R161", sample:r#"fn f(v:&mut Vec<i32>){ v.reserve(0); }"# },
        C{ id:"R162", sample:r#"fn f(){ let _=std::collections::HashMap::<u8,u8>::with_capacity(0); }"# },
        C{ id:"R163", sample:r#"fn f(v:&mut Vec<i32>){ v.shrink_to_fit(); }"# },
        C{ id:"R164", sample:r#"fn f(v:Vec<i32>){ let _=v.clone().into_iter(); }"# },
        C{ id:"R165", sample:r#"fn f(s:&String){ let _=s.as_bytes().to_vec(); }"# },
        C{ id:"R166", sample:r#"fn f(){ let _:Box<Vec<i32>>; }"# },
        C{ id:"R167", sample:r#"fn f(){ let _:std::rc::Rc<std::sync::Mutex<i32>>; }"# },
        C{ id:"R168", sample:r#"fn f(){ let _:std::sync::Arc<std::sync::Mutex<i32>>; }"# },
        C{ id:"R170", sample:r#"fn f(v:&mut Vec<i32>){ v.retain(|_| true); }"# },
        C{ id:"R171", sample:r#"fn f(v:&[u16]){ let _=String::from_utf16_lossy(v); }"# },
        C{ id:"R172", sample:r#"fn f<I:Iterator<Item=char>>(it:I){ let _=String::from_iter(it); }"# },
        C{ id:"R173", sample:r#"fn f<I:Iterator<Item=&str>>(it:I){ let _=it.collect::<Vec<_>>().join(""); }"# },
        C{ id:"R174", sample:r#"fn f(o:Option<Vec<i32>>){ let _=o.unwrap_or_else(|| Vec::new()); }"# },
        C{ id:"R175", sample:r#"fn f(m:std::collections::HashMap<i32,i32>){ let _:Vec<_>=m.keys().collect::<Vec<_>>(); }"# },
        C{ id:"R176", sample:r#"fn f(m:std::collections::HashMap<i32,i32>){ let _:Vec<_>=m.values().collect::<Vec<_>>(); }"# },
        C{ id:"R177", sample:r#"fn f(o:Option<Vec<i32>>){ let _=o.unwrap_or(vec![]); }"# },
        C{ id:"R178", sample:r#"fn f(v:&Vec<String>){ let _=v.iter().map(|x| &*x); }"# },
        C{ id:"R179", sample:r#"fn f(s:&str){ let _=s.chars().last(); }"# },
        C{ id:"R180", sample:r#"fn f(s:&mut String){ s.insert(0,'x'); }"# },
        C{ id:"R181", sample:r#"fn f(v:&mut Vec<i32>){ let _=v.remove(0); }"# },
        C{ id:"R182", sample:r#"fn f(v:&mut Vec<i32>){ v.insert(0,1); }"# },
        C{ id:"R183", sample:r#"fn f(o:Option<i32>){ let _=o.unwrap_or_else(|| Default::default()); }"# },
        C{ id:"R184", sample:r#"fn f(s:&str){ let _=s.to_string().as_str(); }"# },
        C{ id:"R185", sample:r#"fn f<I:Iterator>(it:I){ let _:Vec<_>=it.collect::<Vec<_>>().into_iter().collect::<Vec<_>>(); }"# },
        C{ id:"R186", sample:r#"fn f(s:&str){ let _=s.repeat(1); }"# },
        C{ id:"R187", sample:r#"fn f(dst:&mut String, src:&String){ dst.clone_from(src); }"# },
        C{ id:"R188", sample:r#"fn f(v:&mut Vec<i32>){ v.drain(..).for_each(drop); }"# },
        C{ id:"R189", sample:r#"fn f(v:&mut [i32]){ v.sort_by(|a,b| a.partial_cmp(b).unwrap()); }"# },
        C{ id:"R190", sample:r#"fn f(v:&mut [i32]){ v.sort_by(|a,b| a.cmp(b)); }"# },
        C{ id:"R191", sample:r#"fn f(v:&mut [String]){ v.sort_by_key(|x| x.clone()); }"# },
        C{ id:"R192", sample:r#"fn f<I:Iterator>(it:I){ let _=it.collect::<Vec<_>>().len(); }"# },
        C{ id:"R193", sample:r#"fn f<I:Iterator>(it:I){ let _=it.collect::<Vec<_>>().is_empty(); }"# },
        C{ id:"R194", sample:r#"fn f(v:&mut Vec<i32>){ v.dedup(); }"# },
        C{ id:"R195", sample:r#"fn f(s:&mut String){ s.push_str(&String::from("x")); }"# },
        C{ id:"R196", sample:r#"fn f(s:&String){ let _=String::from(s.as_str()); }"# },
        C{ id:"R197", sample:r#"fn f(v:&Vec<i32>){ let _=v.iter().any(|_| true); }"# },
        C{ id:"R198", sample:r#"fn f(v:&Vec<i32>){ let _=v.iter().all(|_| false); }"# },
        C{ id:"R199", sample:r#"fn f(v:&[i32]){ let _=v.iter().position(|_| true); }"# },
        C{ id:"R200", sample:r#"fn f(x:i32){ let _=format!("{}", x); }"# },
        C{ id:"R201", sample:r#"fn f(){ let _=std::collections::HashSet::<i32>::new(); }"# },
        C{ id:"R202", sample:r#"fn f(){ let _=std::collections::BTreeSet::<i32>::new(); }"# },
        C{ id:"R203", sample:r#"fn f(){ let mut x=Some(1); let _=std::mem::replace(&mut x, Default::default()); }"# },
        C{ id:"R204", sample:r#"fn f(){ let mut x=String::from("a"); let _=std::mem::replace(&mut x, x.clone()); }"# },
        C{ id:"R205", sample:r#"fn f(x:&str){ let _=format!("{:?}", x); }"# },
        C{ id:"R206", sample:r#"fn f(){ let _=std::path::PathBuf::from(String::new()); }"# },
        C{ id:"R207", sample:r#"fn f<I:Iterator>(it:I){ let _=it.collect::<Vec<_>>().iter(); }"# },
        C{ id:"R208", sample:r#"fn f(s:&mut String){ s.push_str(format!("x")); }"# },
        C{ id:"R209", sample:r#"fn f(s:&mut String){ s.push(format!("x")); }"# },
        C{ id:"R210", sample:r#"fn f(s:&str){ let _=s.chars().collect::<Vec<char>>(); }"# },
        C{ id:"R211", sample:r#"fn f(x:&str){ let _=x.to_string().chars(); }"# },
        C{ id:"R212", sample:r#"fn f(x:u32){ let _=x.saturating_add(0); }"# },
        C{ id:"R213", sample:r#"fn f(x:u32){ let _=x.saturating_sub(0); }"# },
        C{ id:"R214", sample:r#"fn f(x:u32){ let _=x.wrapping_add(0); }"# },
        C{ id:"R215", sample:r#"fn f(x:u32){ let _=x.wrapping_sub(0); }"# },
        C{ id:"R216", sample:r#"fn f(x:u32){ let _=x.checked_add(0); }"# },
        C{ id:"R217", sample:r#"fn f<I:Iterator>(it:I){ let _=it.map(|x| x); }"# },
        C{ id:"R218", sample:r#"fn f(s:String){ let _=s.clone().clone(); }"# },
        C{ id:"R219", sample:r#"fn f(s:&str){ let _=s.split(""); }"# },
        C{ id:"R220", sample:r#"fn f(s:&str){ let _:Vec<char>=s.chars().collect::<Vec<char>>(); }"# },
    ]
}

#[rstest]
#[case::sanity_positive_cases_exist(positive_cases())]
fn at_least_120_positive_cases(#[case] cases: Vec<Case>) {
    assert!(cases.len() >= 120, "need ≥120 positives, got {}", cases.len());
}

#[rstest]
fn pattern_is_detected(
    #[values("R001", "R002", "R003", "R004", "R005", "R006", "R007", "R008", "R009", "R010",
             "R011", "R012", "R013", "R014", "R015", "R016", "R017", "R018", "R019", "R020",
             "R021", "R022", "R023", "R024", "R025", "R026", "R027", "R028", "R029", "R030",
             "R031", "R032", "R033", "R034", "R035", "R036", "R037", "R038", "R039", "R040",
             "R041", "R042", "R043", "R044", "R045", "R046", "R047", "R048", "R049", "R050",
             "R051", "R052", "R053", "R054", "R055", "R056", "R057", "R058", "R059", "R060",
             "R061", "R062", "R063", "R064", "R065", "R066", "R067", "R068", "R069", "R070",
             "R071", "R072", "R073", "R074", "R075", "R076", "R077", "R078", "R079", "R080",
             "R081", "R082", "R083", "R084", "R085", "R086", "R087", "R088", "R089", "R090",
             "R091", "R092", "R093", "R094", "R095", "R096", "R097", "R098", "R099", "R100",
             "R101", "R102", "R103", "R104", "R105", "R106", "R107", "R108", "R109", "R110",
             "R111", "R112", "R113", "R114", "R115", "R116", "R117", "R118", "R119", "R120",
             "R121", "R122", "R123", "R124", "R125", "R126", "R127", "R128", "R129", "R130",
             "R131", "R132", "R133", "R134", "R135", "R136", "R137", "R138", "R139", "R140",
             "R141", "R142", "R143", "R144", "R145", "R146", "R147", "R148", "R149", "R150",
             "R151", "R152", "R153", "R154", "R155", "R156", "R157", "R158", "R159", "R160",
             "R161", "R162", "R163", "R164", "R165", "R166", "R167", "R168", "R170", "R171",
             "R172", "R173", "R174", "R175", "R176", "R177", "R178", "R179", "R180", "R181",
             "R182", "R183", "R184", "R185", "R186", "R187", "R188", "R189", "R190", "R191",
             "R192", "R193", "R194", "R195", "R196", "R197", "R198", "R199", "R200", "R201",
             "R202", "R203", "R204", "R205", "R206", "R207", "R208", "R209", "R210", "R211",
             "R212", "R213", "R214", "R215", "R216", "R217", "R218", "R219", "R220")]
    pattern_id: &str,
) {
    let cases = positive_cases();
    let case = cases.iter().find(|c| c.id == pattern_id).unwrap();
    let issues = scan(case.sample);
    assert!(has_id(&issues, case.id), "Expected pattern {} to match.\nSample:\n{}\nIssues: {:?}", case.id, case.sample, issues);
}

#[rstest]
fn safe_snippet_does_not_match(
    #[values("R001", "R002", "R003", "R004", "R005", "R006", "R007", "R008", "R009", "R010",
             "R011", "R012", "R013", "R014", "R015", "R016", "R017", "R018", "R019", "R020",
             "R021", "R022", "R023", "R024", "R025", "R026", "R027", "R028", "R029", "R030",
             "R031", "R032", "R033", "R034", "R035", "R036", "R037", "R038", "R039", "R040",
             "R041", "R042", "R043", "R044", "R045", "R046", "R047", "R048", "R049", "R050",
             "R051", "R052", "R053", "R054", "R055", "R056", "R057", "R058", "R059", "R060",
             "R061", "R062", "R063", "R064", "R065", "R066", "R067", "R068", "R069", "R070",
             "R071", "R072", "R073", "R074", "R075", "R076", "R077", "R078", "R079", "R080",
             "R081", "R082", "R083", "R084", "R085", "R086", "R087", "R088", "R089", "R090",
             "R091", "R092", "R093", "R094", "R095", "R096", "R097", "R098", "R099", "R100",
             "R101", "R102", "R103", "R104", "R105", "R106", "R107", "R108", "R109", "R110",
             "R111", "R112", "R113", "R114", "R115", "R116", "R117", "R118", "R119", "R120",
             "R121", "R122", "R123", "R124", "R125", "R126", "R127", "R128", "R129", "R130",
             "R131", "R132", "R133", "R134", "R135", "R136", "R137", "R138", "R139", "R140",
             "R141", "R142", "R143", "R144", "R145", "R146", "R147", "R148", "R149", "R150",
             "R151", "R152", "R153", "R154", "R155", "R156", "R157", "R158", "R159", "R160",
             "R161", "R162", "R163", "R164", "R165", "R166", "R167", "R168", "R170", "R171",
             "R172", "R173", "R174", "R175", "R176", "R177", "R178", "R179", "R180", "R181",
             "R182", "R183", "R184", "R185", "R186", "R187", "R188", "R189", "R190", "R191",
             "R192", "R193", "R194", "R195", "R196", "R197", "R198", "R199", "R200", "R201",
             "R202", "R203", "R204", "R205", "R206", "R207", "R208", "R209", "R210", "R211",
             "R212", "R213", "R214", "R215", "R216", "R217", "R218", "R219", "R220")]
    _id: &str,
) {
    let issues = scan(SAFE_SNIPPET);
    assert!(issues.is_empty(), "Safe snippet unexpectedly matched: {:?}", issues);
}
